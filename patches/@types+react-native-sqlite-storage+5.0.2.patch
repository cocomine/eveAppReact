diff --git a/node_modules/@types/react-native-sqlite-storage/index.d.ts b/node_modules/@types/react-native-sqlite-storage/index.d.ts
index f570a51..06a0f9c 100644
--- a/node_modules/@types/react-native-sqlite-storage/index.d.ts
+++ b/node_modules/@types/react-native-sqlite-storage/index.d.ts
@@ -8,7 +8,7 @@
 export function DEBUG(isDebug: boolean): void;
 export function enablePromise(enablePromise: boolean): void;
 
-export function openDatabase(params: DatabaseParams): Promise<SQLiteDatabase>;
+export function openDatabase(params: DatabaseParams): SQLiteDatabase;
 export function openDatabase(
     params: DatabaseParams,
     success?: () => void,
@@ -70,14 +70,16 @@ export interface SQLError {
 }
 
 export type StatementCallback = (transaction: Transaction, resultSet: ResultSet) => void;
-export type StatementErrorCallback = (transaction: Transaction, error: SQLError) => void;
+export type StatementErrorCallback = (error: SQLError) => void;
+export type successfulCallback = () => void;
 export interface Transaction {
-    executeSql(sqlStatement: string, arguments?: any[]): Promise<[Transaction, ResultSet]>;
+    executeSql(sqlStatement: string, arguments?: any[]): void;
     executeSql(
         sqlStatement: string,
         arguments?: any[],
         callback?: StatementCallback,
         errorCallback?: StatementErrorCallback,
+        successfulCallback?: successfulCallback,
     ): void;
 }
 
@@ -85,7 +87,7 @@ export type TransactionCallback = (transaction: Transaction) => void;
 export type TransactionErrorCallback = (error: SQLError) => void;
 
 export interface SQLiteDatabase {
-    transaction(scope: (tx: Transaction) => void): Promise<Transaction>;
+    transaction(scope: (tx: Transaction) => void): void;
     transaction(
         scope: (tx: Transaction) => void,
         error?: TransactionErrorCallback,
@@ -97,7 +99,7 @@ export interface SQLiteDatabase {
         error?: TransactionErrorCallback,
         success?: TransactionCallback,
     ): void;
-    close(): Promise<void>;
+    close(): void;
     close(success: () => void, error: (err: SQLError) => void): void;
     executeSql(statement: string, params?: any[]): Promise<[ResultSet]>;
     executeSql(statement: string, params?: any[], success?: StatementCallback, error?: StatementErrorCallback): void;
